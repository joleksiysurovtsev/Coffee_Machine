type: edu
custom_name: stage5
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachine.java
  visible: true
  text: "package machine;\n\nimport java.util.Scanner;\n\npublic class CoffeeMachine\
    \ {\n    private static int earnings = 550;\n    private static int mlOfWater\
    \ = 400;\n    private static int mlOfMilk = 540;\n    private static int gramsOfCoffeeBeans\
    \ = 120;\n    private static int disposableCups = 9;\n\n\n    //метод считает\
    \ сколько ингрижиентов нужно для определённого количества воды\n    public static\
    \ void getPrintMassage ( int cupNum ) {\n        int mlOfWater = cupNum * 200;\n\
    \        int mlOfMill = cupNum * 50;\n        int gOfCoffeeBeans = cupNum * 15;\n\
    \        System.out.println( \"For \" + cupNum + \" cups of coffee you will need:\"\
    \ );\n        System.out.println( mlOfWater + \" ml of water \\n\" + mlOfMill\
    \ + \" of milk\\n\" + gOfCoffeeBeans + \" g of coffee beans\" );\n    }\n\n\n\
    \    public static int howMuchCup ( int mlOfWater , int mlOfMilk , int gOfCoffeeBeans\
    \ ) {\n        int waterCanCup = mlOfWater / 200;\n        int milkCanCup = mlOfMilk\
    \ / 50;\n        int coffeeCanCup = gOfCoffeeBeans / 15;\n\n        int minNumCup;\n\
    \n        if (waterCanCup > 0 && milkCanCup > 0 && coffeeCanCup > 0) {\n     \
    \       if (waterCanCup <= milkCanCup && waterCanCup <= coffeeCanCup) {\n    \
    \            minNumCup = waterCanCup;\n            } else {\n                if\
    \ (milkCanCup <= waterCanCup && milkCanCup <= coffeeCanCup) {\n              \
    \      minNumCup = milkCanCup;\n                } else {\n                   \
    \ minNumCup = coffeeCanCup;\n                }\n            }\n        } else\
    \ {\n            minNumCup = 0;\n        }\n        return minNumCup;\n    }\n\
    \n\n    /**\n     * check how many cups of coffee a coffee machine can make\n\
    \     * проверка можно ли приготовить кофе\n     */\n    public static void yOrN\
    \ ( int cupNum , int howMuchCup ) {\n        if (cupNum == howMuchCup) {\n   \
    \         System.out.println( \"Yes, I can make that amount of coffee\" );\n \
    \       } else {\n            if (cupNum > howMuchCup) {\n                System.out.println(\
    \ \"No, I can make only \" + howMuchCup + \" cup(s) of coffee\" );\n         \
    \   } else {\n                System.out.println( \"Yes, I can make that amount\
    \ of coffee (and even \" + (howMuchCup - cupNum) + \" more than that)\" );\n \
    \           }\n        }\n    }\n\n\n    /**\n     * fills the contents of the\
    \ coffee machine\n     */\n    private static void fillTheCoffeeMachine ( int\
    \ addMlOfWater , int addMlOfMilk , int addGramsOfCoffeeBeans , int addDisposableCups\
    \ ) {\n        mlOfWater += addMlOfWater;\n        mlOfMilk += addMlOfMilk;\n\
    \        gramsOfCoffeeBeans += addGramsOfCoffeeBeans;\n        disposableCups\
    \ += addDisposableCups;\n        coffeeMachineHas( );\n    }\n\n\n    /**\n  \
    \   * Prints coffee machine status\n     */\n    private static void coffeeMachineHas\
    \ ( ) {\n        System.out.println( \"The coffee machine has:\" );\n        System.out.println(\
    \ mlOfWater + \" of water\" );\n        System.out.println( mlOfMilk + \" of milk\"\
    \ );\n        System.out.println( gramsOfCoffeeBeans + \" of coffee beans\" );\n\
    \        System.out.println( disposableCups + \" of disposable cups\" );\n   \
    \     System.out.println( earnings + \" of money\" + '\\n' );\n    }\n\n\n   \
    \ /**\n     * If the user writes “take,” the program should give him all the money\
    \ that he earned from selling coffee.\n     */\n    private static void takeEarnings\
    \ ( ) {\n        System.out.println( \"I gave you $\" + earnings + '\\n' );\n\
    \        earnings = 0;\n        coffeeMachineHas( );\n    }\n\n\n    /**\n   \
    \  * Method of preparing a drink To make an espresso coffee machine,\n     * you\
    \ need 250 ml of water and 16 g of coffee beans. It costs $ 4.\n     * To make\
    \ a latte, the coffee maker needs 350 ml of water, 75 ml of milk and 20 g of coffee\
    \ beans.\n     * It costs $ 7. And to make a cappuccino, the coffee machine needs\
    \ 200 ml of water, 100 ml of milk and 12 g of coffee. It costs $ 6.\n     */\n\
    \    private static void makeBeverage ( int beverage ) {\n        switch (beverage)\
    \ {\n            case 1:\n                mlOfWater -= 250;\n                gramsOfCoffeeBeans\
    \ -= 16;\n                disposableCups--;\n                earnings += 4;\n\
    \                coffeeMachineHas( );\n                break;\n            case\
    \ 2:\n                mlOfWater -= 350;\n                mlOfMilk -= 75;\n   \
    \             gramsOfCoffeeBeans -= 20;\n                disposableCups--;\n \
    \               earnings += 7;\n                coffeeMachineHas( );\n       \
    \         break;\n            case 3:\n                mlOfWater -= 200;\n   \
    \             mlOfMilk -= 100;\n                gramsOfCoffeeBeans -= 12;\n  \
    \              disposableCups--;\n                earnings += 6;\n           \
    \     coffeeMachineHas( );\n                break;\n        }\n    }\n\n\n   \
    \ public static void main ( String[] args ) {\n        coffeeMachineHas( );\n\
    \        Scanner sc = new Scanner( System.in );\n        System.out.println( \"\
    Write action (buy, fill, take)\" );\n        String standardInput = sc.next( );\n\
    \n\n        switch (standardInput) {\n\n            /* If the user writes “buy”\
    , he must choose one of the three\n            varieties of coffee that the coffee\
    \ machine can prepare:\n            espresso, latte or cappuccino.*/\n       \
    \     case \"buy\":\n                System.out.println( \"What do you want to\
    \ buy? 1 - espresso, 2 - latte, 3 - cappuccino\" );\n                int beverage\
    \ = sc.nextInt( );\n                makeBeverage( beverage );\n              \
    \  break;\n\n\n            /*If the user writes \"fill\", the program should ask\
    \ him\n            how much water, milk, coffee and how many disposable cups\n\
    \            he wants to add into the coffee machine.*/\n            case \"fill\"\
    :\n                System.out.println( '\\n' + \"Write how many ml of water do\
    \ you want to add:\" );\n                int addMlOfWater = sc.nextInt( );\n\n\
    \                System.out.println( \"Write how many ml of milk do you want to\
    \ add:\" );\n                int addMlOfMilk = sc.nextInt( );\n\n            \
    \    System.out.println( \"Write how many grams of coffee beans do you want to\
    \ add: \" );\n                int addGramsOfCoffeeBeans = sc.nextInt( );\n\n \
    \               System.out.println( \"Write how many disposable cups of coffee\
    \ do you want to add: \" );\n                int addDisposableCups = sc.nextInt(\
    \ );\n\n                System.out.println( );\n                fillTheCoffeeMachine(\
    \ addMlOfWater , addMlOfMilk , addGramsOfCoffeeBeans , addDisposableCups );\n\
    \                break;\n\n            /* If you are another special worker and\
    \ it is time to\n            take the money from the coffee machine, input \"\
    take\".*/\n            case \"take\":\n                takeEarnings( );\n    \
    \            break;\n\n            default:\n                System.out.println(\
    \ \"\" );\n\n        }\n\n\n//\t\tScanner sc = new Scanner(System.in);\n//\t\t\
    System.out.println(\"Write how many ml of water the coffee machine has:\");\n\
    //\t\tint mlOfWater = sc.nextInt();\n//\t\tSystem.out.println(\"Write how many\
    \ ml of milk the coffee machine has:\");\n//\t\tint mlOfMill = sc.nextInt();\n\
    //\t\tSystem.out.println(\"Write how many grams of coffee beans the coffee machine\
    \ has:\");\n//\t\tint gOfCoffeeBeans = sc.nextInt();\n//\t\tSystem.out.println(\"\
    Write how many cups of coffee you will need:\");\n//\t\tint cupNum = sc.nextInt();\n\
    //\n//\t\t//System.out.println(howMuchCup(mlOfWater, mlOfMill, gOfCoffeeBeans));\n\
    //\n//\t\tyOrN(cupNum, howMuchCup(mlOfWater, mlOfMill, gOfCoffeeBeans));\n\n\n\
    //        System.out.println(\"Starting to make a coffee\");\n//        System.out.println(\"\
    Grinding coffee beans\");\n//        System.out.println(\"Boiling water\");\n\
    //        System.out.println(\"Mixing boiled water with crushed coffee beans\"\
    );\n//        System.out.println(\"Pouring coffee into the cup\");\n//       \
    \ System.out.println(\"Pouring some milk into the cup\");\n//        System.out.println(\"\
    Coffee is ready!\");\n    }\n\n\n}\n"
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/179/implement
status: Solved
record: -1
